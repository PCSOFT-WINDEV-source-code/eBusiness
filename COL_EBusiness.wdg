#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : COL_EBusiness
 major_version : 28
 minor_version : 0
 type : 7
 description : ""
 subtype : 0
procedure_set :
 identifier : 0x13a93c878db4a4ed
 internal_properties : CAAAAAgAAABGLu41kG7fjQV3iS4F72qmnKaNh5694reolNKIW0iw
 code_elements :
  internal_properties : CAAAAAgAAABHpJXXtCmVCCbtfoOkXjNpDAfm1N4PmnJgq2blOqs9FLLq1I+KoDJtpZ3xc7CeJbjFj8Bw1K4H6/TzCZ1/9NTFKdq/e1nDUXlMgg2dtR8Lbj4a7YoKDBZLYWykFVIRVc5MSoHbbT/DAv9yXB6QZMPEQhRkVKSPWa8YQebhZ31bLUpmTjgATooqLnatFPWjebEecERun0xi2a/7FCTKHQzpy9nQ6Sopl12jrpXyXFmzHOJUiTP/NM6YejhNOyJ8vkxsIVKMmrooU8CImHkPs86W3nGOEDfbCFFIHP/qCEgXjVoZqQerLmSSKfCgCOHqFiVYg5+AmwCjsxPyMMtjHvA9thkKi6/rsL4DP7+tc/GfO1E/SKLJ4VpkW82iBY+1bb9b+O/g4Ko3OITJ+NjUbTz52FtSXhhK6XcCHNCWc+pWX014FVgXMplB/rPeTUkRRsk=
  type_code : 31
  p_codes :
   -
     internal_properties : CAAAAAgAAAAHTh3/gPWgnhTltnaNhqpG7zEogRNVokyHY0N5msJcPqQTQF7X+I9L+sHA3AkGcPUYeaCj5SeZfaMO8TRyw9niw1qjSzBYPEBllyKiCwtJZJkXEcdL4gARb0vHJKmLZUPDOPJk2LSsAWLSTuqpj4hgIAkGTiLDjZlVoTwrXEqw
     code : |1+
      // The set of procedures named COL_EBusiness is used to manage an ebusiness site
      // It uses the following analysis files:
      // - Customer: file of customer accounts
      // - Address: file of active addresses for the customers
      // - Orders: file of orders placed on the site
      // - OrdLine: file of order details
      // - ArchiveAddress: file of addresses used in the orders, in addition only
      // - Product: file of products
      // - ProductFamily: file of product families
      // - ProductPhoto: file of product photos
      // - TaxRate: file of tax rates
      // The project must necessarily use the management of AWP contexts on the disk (ConfigureAWPContext(ctxDisk) in the initialization code of the project)
      
      // Constants of the internal component
      CONSTANT
      	// Types of payments (used in the Orders.PaymentType item)
      	PAYM_CC = 1				// Payment by credit card
      	PAYM_PAYPAL = 2			// Payment by PayPal
      	PAYM_WIRE = 3		// Payment by bank wire
      	PAYM_CHECK = 4			// Payment by check
      	
      	// Options of DisplayableAddress
      	ADDR_ACTIVE = 0
      	ADDR_ARCHIVE = 1	
      	
      	// Default pages
      	PAGE_VIEWBASKET_DEFAULT = "basket.awp"
      	PAGE_BACK_TO_STORE_DEFAULT = "home.awp"
      	PAGE_VIEW_PRODUCT_DEFAULT = "product.awp"
      	PAGE_VIEW_DEFAULT_PRODUCT_MOBILE = "product_mobile.awp"
      	
      	// Roles of photos of products
      	ROLE_PHOTO_NORMAL = 0				// Standard square photo, 512x512 without enlargement
      	ROLE_PHOTO_SQUARE_SMALL = 1			// Small square photo: 128x128
      	ROLE_PHOTO_LARGE_SQUARE = 2			// Large square photo: 256x256
      	
      	// Manage the characteristics of products with the same reference
      	csReferenceSeparator	= "#"		// Separator of references in case of characteristics
      	
      	// Type of payment solutions
      	PAYMENT_PAYBOX		= "PAYBOX"
      	PAYMENT_PAYPAL		= "PAYPAL"
      	PAYMENT_CHECK		= "CHECK"
      	PAYMENT_WIRE	= "BANK TRANSFER"
      END
      
      // Structures of customer basket
      STBasketLine is Structure
      	// Content of the basket line
      	sProductRef is string				// Reference of product
      	nNbArticles is int				// Number of articles for this reference
      	// "Cache" variables to limit the number of calculations and accesses to the files on the server
      	sArticleCap is string				// Caption of the article
      	cyUnitPriceBT is currency		// Unit price BT
      	cyUnitTax is currency			// Amount of the tax applied to an article
      	cyUnitPriceIOT is currency		// Unit price IOT
      	aaCharacteristic is ASSOCIATIVE ARRAY of variant // table containing the characteristics specific to the product (color, size, etc.)
      	nPromotionID is int // Identifier of the associated promotion (0 if no promotion)
      	nVariationID is int // Identifier of the variation
      END
      
      STOrder is Structure
      	// Basket Content
      	arrBasket is array of STBasketLine
      	// "Cache" variables to limit the number of calculations on the server
      	aaProduct is ASSOCIATIVE ARRAY of int		// Rank of a product in the basket (indexed on its reference)
      	nNbArticles is int							// Number of articles
      	cyTotalPriceBT is currency						// Total value of basket (BT)
      	cyTotalTax is currency						// Total value of taxes
      	// Delivery variables
      	cyDeliveryCostBT is currency				// Shipping costs (BT)
      	cyDeliveryCostIOT is currency				// Shipping costs (IOT)
      	// Total value of basket IOT, including the shipping costs (total amount to pay)
      	cyTotalPriceIOT is currency						// Total value of basket (IOT)
      	
      	// Variables used by the conversion channel
      	nCustomerID is int				// Customer currently placing an order
      	nDeliveryAddressID is int	// Selected delivery address
      	nInvoicingAddressID is int	// Selected invoicing address
      	
      	nOrderID is int			// Order currently created
      END
      
      // Global variables of the internal component (these variables are placed in the AWP context in the InitializeEBusiness procedure)
      gbInitCompleted is boolean = False				// True if the initialization of the internal component was already performed
      gStBasket is STOrder							// Variable storing the basket
      gsCurrentError is string						// Text containing the last fatal error
      gsBasketError is string						// Text containing the last error linked to the basket
      
      // Customizable entry points
      gPGenerateOrderNum is Procedure = OrderCreate			// Procedure returning for each call the next order number to use
      
      // Names of pages
      gsNamePageViewBasket is string = PAGE_VIEWBASKET_DEFAULT		// Page for viewing the basket (entry of conversion channel)
      gsNamePageBackToStore is string = PAGE_BACK_TO_STORE_DEFAULT	// Page for going back to the store from the conversion channel
      gsNamePageViewProduct is string = PAGE_VIEW_PRODUCT_DEFAULT	// Page for viewing a product
      gsPageNameViewMobileProduct is string = PAGE_VIEW_DEFAULT_PRODUCT_MOBILE	// Page for viewing a product on mobile
      
     type : 720896
  procedures :
   -
     name : InitializeEBusiness
     internal_properties : CAAAAAgAAAC6Nebt7ij6ubbGC80q2pteG5C8nLrfob58RrglTdgql0LPYeRZPlRdXDR2EFYC5UogkGwlXjL5E2yIyQ7U0HQ5oxyauiS2M8q60h5qtE2m1WZrwa3Fjhs49NnkJjuE3r/LKknrHFH9pvjj/h1E+DGQLWtn6uBV8BfA/dyuTdG/dv7Q8no3Vn3YjPkb4URERZ+hqQfmOVI=
     procedure_id : 1416730110680474861
     type_code : 15
     code : |1+
      // Summary: Initializes the internal component
      // Syntax:
      //[ <Result> = ] InitializeEBusiness ()
      //
      // Parameters:
      //	None
      
      // Return value:
      // 	boolean: Returns True during the first initialization
      Procedure InitializeEBusiness()
      
      <compile if Configuration="eBusiness">
      	// Declare the global variables of the context
      	DeclareAWPContext(gbInitCompleted)
      	DeclareAWPContext(gStBasket)
      	DeclareAWPContext(gsNamePageViewBasket)
      	DeclareAWPContext(gsNamePageBackToStore)
      	DeclareAWPContext(gsCurrentError)
      	DeclareAWPContext(gsNamePageViewProduct)
      	DeclareAWPContext(gsPageNameViewMobileProduct)
      	
      	
      	// If it is the first initialization (the variables have not been read in the context)
      	IF gbInitCompleted = False THEN
      		// The initialization is completed
      		gbInitCompleted = True
      		
      		// Returns True during the first initialization
      		// The caller knows that the variables of the set of procedures have their default values and that they can be replaced
      		RESULT True
      	END
      <END>
      
      
      // Returns False during the other initializations (once the AWP context is re-read)
      // The caller knows that the variables have been re-read in the AWP session
      RESULT False
      
     type : 458752
   -
     name : BasketNbArticles
     internal_properties : CAAAAAgAAADJSXTuuO7Ys40nFWa6vrf5oeI3U4KtB0jXuGc642g9C666feOsdJb2gaRU8Jd62bYvgI0Oq4OptH/I5766mDtPt9eRp6WROGVLMF79FDryWKG8YhZy2mbkeNESPxExSx81WqsBGUVvIxa+ymCWKp8hw08scc/FdQ5orJeQFpziy+7pvD2Ocf9sds0UpB8PGztu8BMHXOTQICPeKUMeb7v8k/yVuPA5L5sJO8AOuzpXrWvAp1hjIKZfsNAdjhwQ2c3DiXzcykuf46eggMBRV1QwOzTOyVfVPTR9jIcyMbzAXpKEBsRp2J7WOTymADLDnH5RUejhvt/YaxJnblGGyHRPOBqrh6kM20mJn3R6Du1lG1Nqw0895z34Sc1H
     procedure_id : 1416730110680540397
     type_code : 15
     code : |1-
      // Summary: Returns a caption corresponding to the number of articles in the basket
      // Syntax:
      //[ <Result> = ] BasketNbArticles ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	string: Caption corresponding to the number of articles in the basket
      
      Procedure BasketNbArticles()
      
      SWITCH gStBasket.nNbArticles
      	CASE 0
      		RESULT "Empty basket"
      	CASE 1
      		RESULT "1 item"
      END
      
      RESULT StringBuild("%1 items",gStBasket.nNbArticles)
     type : 458752
   -
     name : BasketValueIOT
     internal_properties : CAAAAAgAAABY56SoSclrjTrdxlgqEekbrvj6VhsmJxvZYMYAN/qgdB5ckGN/xHM4671KdCF5mzqBTrBAQUuUO7gErLUC1f8D2tqXJKeorLN5oja2Wbv57b67hVx1xutZIKRBnTIf7ThQfjwH6QrUFKrEv+AuZ7Lys5m2Or02uUMTR4uhWtV5fwQqXKUDVRNAdpkuFevX4AOnQtucqM0tUTkOB9K9oWbUUNqn00IStMpZsmlrvDL+k/dT3PDt7dd4rmfmQdDU0JVimYNeQO1N9bwHYeBC5vaiE/uDsacskKf8ghVC1iDDWJHfib1DYTbD+UTjJazKNudmPrS4622c3mb5TCchfHlUHavQxsnMsv+n/qmSG9v/3Wt0KL2iDxEQ
     procedure_id : 1416730110680605933
     type_code : 15
     code : |1-
      // Summary: Returns the total value of the basket (IOT)
      // Syntax:
      //[ <Result> = ] BasketValueIOT ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	string: Total value of the basket (IOT)
      
      Procedure BasketValueIOT()
      
      RESULT CurrencyToString(gStBasket.cyTotalPriceIOT)
     type : 458752
   -
     name : BasketLineCaption
     procedure_id : 1416730110680671469
     type_code : 15
     code : |1-
      // Summary: Returns a caption corresponding to the basket line
      // Syntax:
      //[ <Result> = ] BasketLineCaption (<nLine> is int)
      //
      // Parameters:
      //	nLine (integer): basket line
      // Return value:
      // 	string: Caption of the basket line
      //
      
      Procedure BasketLineCaption( nLine is int )
      
      dbgAssert(nLine<=ArrayCount(gStBasket.arrBasket))
      
      stLine is STBasketLine = gStBasket.arrBasket[nLine]
      
      RESULT StringBuild("%1 %2 (%3)",stLine.nNbArticles,stLine.sArticleCap,CurrencyToString(stLine.cyUnitPriceIOT*stLine.nNbArticles))
     type : 458752
   -
     name : BasketAdd
     procedure_id : 1416730110680737005
     type_code : 15
     code : |1+
      // Summary: Adds a product into the basket
      // Syntax:
      //[ <Result> = ] BasketAdd (<sProductRef> is string, <nNbAdditions> is int [, <aaCharacteristic> is associative array[, <cySpecificPrice> is currency [, <nPromotionID> is int [, <nVariationID> is int]]]])
      //
      // Parameters:
      //	sProductRef (ANSI string): Reference of the product
      //	nNbAdditions (integer): Quantity to add
      //	aaCharacteristic (associative array - default value=0): Characteristics of the product
      //	cySpecificPrice (currency - default value=-1): Price of the product
      //	nPromotionID (integer - default value=0): Identifier of the promotion
      //	nVariationID (integer - default value=0): <specify the role of nVariationID>
      // Return value:
      // 	ANSI string: Reference of the added product
      //
      
      Procedure BasketAdd(LOCAL sProductRef is string, LOCAL nNbAdditions is int, aaCharacteristic is ASSOCIATIVE ARRAY of variants = Null, LOCAL cySpecificPrice is currency=-1, LOCAL nPromotionID is int = 0, LOCAL nVariationID is int = 0)
      
      // Local variables
      sAddedReference		is string
      
      // Is there an array of characteristics?
      IF aaCharacteristic..Occurrence > 0 THEN
      	// Store it in the reference
      	sAddedReference = _sBuildReference(sProductRef,aaCharacteristic)
      ELSE
      	sAddedReference = sProductRef
      END
      
      RESULT BasketModifyNumber(sAddedReference, nNbAdditions, *, aaCharacteristic, cySpecificPrice, nPromotionID, nVariationID)
      
     type : 458752
   -
     name : BasketDeleteProduct
     internal_properties : CAAAAAgAAAAE1Ed0Grf/WqbQsQCQtngdf5+tWghaxA4VK89JHGFDJ9TfSC9auWO0Hh+aZDDGMdA3JJUDy59k/4SA2512rNtB35lPHibZXACVDzJlWdrN9yuNFdUlqGOlejunoyWg+AOrKfUtCzZ6Sk+Fjxj/2Pg+SSv93J4QzKFNKmrsVsVEnlaeWLMQifzBE8FzV2DAlnUPZXS3yNaKc0n1MV/WJvhKHl2rjjT3kbhY1htebZhvaBpFcjN6NxHbQYfzyoS5cKMCkKaaLLGN6imZfDjtGOtkyKE2Zb89YStxwyEaTXEr4B+3lBwddlSo71RbGF9K2XerOwR/SQillubwBpnxMj3lwtfb/gx1UsrVqXhm5g5/N6olyFdgkebGrA==
     procedure_id : 1416730110680802541
     type_code : 15
     code : |1+
      // Summary: Deletes a product from the basket (regardless of the quantity found)
      // Syntax:
      //BasketDeleteProduct (<sProductRef> is string)
      //
      // Parameters:
      //	sProductRef (ANSI string): Reference to delete
      
      Procedure BasketDeleteProduct(LOCAL sProductRef is string )
      
      dbgAssert(gStBasket.aaProduct[sProductRef]>0,"Deleting a non-existing item")
      nRankInBasket is int = gStBasket.aaProduct[sProductRef]
      
      // Refreshes the global counters
      gStBasket.nNbArticles -= gStBasket.arrBasket[nRankInBasket].nNbArticles
      gStBasket.cyTotalPriceIOT -= gStBasket.arrBasket[nRankInBasket].nNbArticles*gStBasket.arrBasket[nRankInBasket].cyUnitPriceIOT
      gStBasket.cyTotalPriceBT -= gStBasket.arrBasket[nRankInBasket].nNbArticles*gStBasket.arrBasket[nRankInBasket].cyUnitPriceBT
      gStBasket.cyTotalTax -= gStBasket.arrBasket[nRankInBasket].nNbArticles*gStBasket.arrBasket[nRankInBasket].cyUnitTax
      IF gStBasket.arrBasket[nRankInBasket].aaCharacteristic<>Null THEN
      	ArrayDeleteAll(gStBasket.arrBasket[nRankInBasket].aaCharacteristic)	
      END
      	
      
      // Deletes from the arrays
      ArrayDeleteLine(gStBasket.arrBasket,nRankInBasket)
      ArrayDeleteLine(gStBasket.aaProduct,sProductRef)
      
      // Refreshes the indexes in the associative array
      FOR EACH nRank of gStBasket.aaProduct
      	IF nRank>nRankInBasket THEN
      		nRank--
      	END
      END
     type : 458752
   -
     name : BasketDelete
     procedure_id : 1416730110680868077
     type_code : 15
     code : |1+
      // Summary: Deletes a product from the basket
      // Syntax:
      //[ <Result> = ] BasketDelete (<sProductRef> is string, <nNbDel> is int)
      //
      // Parameters:
      //	sProductRef (ANSI string): Reference of the product
      //	nNbDel (integer): Quantity to delete
      // Return value:
      // 	ANSI string: Reference of the product
      
      Procedure BasketDelete(LOCAL sProductRef is string, nNbDel is int )
      
      RESULT BasketModifyNumber(sProductRef,-nNbDel,*,Null)
     type : 458752
   -
     name : BasketModifyNumber
     internal_properties : CAAAAAgAAADqX8lPd8dv+2A1Nbh6OdESlf/AnQQ0CY6UTvhVK81G+MMy5u6zhZ8t8lbMiaAzSNtepZCwcqB1z9QwU0NtDBY2rsrF+WLXhMu8BtUImCZ4iRcTUv0FFfxgMFIfWcaHmvxcGmuWlx6+O35TcPM0XLN+gvBFtawJgLBlMUR7iVAHz4e6+NeBs2nLaE0op4HfKqv1EK8SlvBFNuiNXiNAX9oNq30X1a+GYXIPuOuo4gnpW2tHgGKMPj/T39X848o3dHTrAiQBWARibAJT27WEY5eLvjIhTfqoX3XrqI7Niquy/S1h5LaUeNlwyq2eJMUdcdsCAfABH8ggQmTw2acDCjt0OElPlU+a7OySiTRxlwVXoPE4iBSFDMjZcl8mpGFW
     procedure_id : 1416730110680933613
     type_code : 15
     code : |1-
      // Summary: Modifies the quantity of a product in the basket
      // Syntax:
      //[ <Result> = ] BasketModifyNumber (<sProductRef> is string, <nNbModif> is int [, <bDeleteIfNull> is boolean [, <aaCharacteristic> is associative array [, <cySpecificPrice> is currency [, <nPromotionID> is int [, <nVariationID> is int]]]]])
      //
      // Parameters:
      //	sProductRef (ANSI string): Reference of the product
      //	nNbModif (integer): new quantity
      //	bDeleteIfNull (boolean - default value=1): True to delete the line if the quantity is equal to zero
      //	aaCharacteristic (associative array - default value=0): Characteristics of the product
      //	cySpecificPrice (currency - default value=-1): Price of the product
      //	nPromotionID (integer - default value=0): Identifier of the promotion
      //	nVariationID (integer - default value=0): Identifier of the product variation
      // Return value:
      // 	ANSI string: Reference of the product 
      //
      
      Procedure BasketModifyNumber(LOCAL sProductRef is string, nNbModif is int , bDeleteIfNull is boolean = True,aaCharacteristic is ASSOCIATIVE ARRAY of variants = Null, cySpecificPrice is currency=-1, nPromotionID is int = 0, nVariationID is int = 0)
      
      nNbRealModif is int // Number of articles to actually add (while taking the possible stock outage into account)
      nNbInStock is int
      nNbArticleBefore is int
      bProductIsLimited is boolean = False
      
      // Finds the product and its tax rate in the database
      IF bReadProductAccordingToReference(sProductRef)  = False THEN
      	RESULT ""
      END
      
      // Finds the product in the basket
      nRankInBasket is int = gStBasket.aaProduct[sProductRef]
      IF nRankInBasket=0 THEN
      	// Error if we are in deletion
      	IF nNbModif<0 THEN
      		dbgAssert(False,"Deleting a product that is not found in the basket")
      		RESULT ""
      	END
      	
      	// This product does not exist in the basket, add it
      	// Finds the tax rate in the database
      	IF HReadSeekFirst(TaxRate,TaxRateID,product.TaxRateID) = False THEN
      		dbgAssert(False,"The product is not associated with a tax rate")
      		RESULT ""
      	END
      	
      	// Stores the number of products to add
      	nNbRealModif = nNbModif
      	// Is the number of products limited in stock?
      	bProductIsLimited = bProductIsInLimitedQuantity(product.productid)
      	// Checks whether the product or the variation is in stock
      	IF nVariationID > 0 THEN
      		IF bVariationIsInStock(nVariationID) = False THEN
      			gsBasketError = ReadBasketTextProductInsufficientStock()
      			RESULT ""
      		ELSE
      			nNbInStock = nNbVariationsInStock(nVariationID)
      		END
      	ELSE
      		IF bProductIsInStock(product.ProductID) = False THEN
      			gsBasketError = ReadBasketTextProductInsufficientStock()
      			RESULT ""
      		ELSE
      			nNbInStock = nNbProductInStock(product.ProductID)
      		END
      	END
      	
      	// If there is stock, store the available stock value if the request is too important
      	IF bProductIsLimited _AND_ nNbInStock < nNbModif THEN nNbRealModif = nNbInStock
      	
      	// Create the basket line
      	stNewLine is STBasketLine 
      	// If no specific price is specified (promotion, discount, free, ...)
      	IF cySpecificPrice = -1 THEN
      		// Retrieves the price BT of the product
      		stNewLine.cyUnitPriceBT = product.UnitPriceBT
      	ELSE
      		// Retrieves the specific price
      		stNewLine.cyUnitPriceBT = cySpecificPrice
      	END
      	stNewLine.cyUnitTax = (stNewLine.cyUnitPriceBT * TaxRate.Rate) / 100
      	stNewLine.cyUnitPriceIOT = stNewLine.cyUnitPriceBT + stNewLine.cyUnitTax
      	stNewLine.nNbArticles = nNbRealModif
      	stNewLine.sArticleCap = product.ProductCaption
      	stNewLine.sProductRef = sProductRef
      	stNewLine.nPromotionID = nPromotionID
      	stNewLine.nVariationID = nVariationID
      	// Store the characteristic if there is one
      	IF aaCharacteristic <> Null THEN
      		stNewLine.aaCharacteristic = aaCharacteristic
      	END
      	
      	nRankInBasket = ArrayAddLine(gStBasket.arrBasket,stNewLine)
      	dbgAssert(nRankInBasket<>-1,"The addition into the table failed")
      	IF nRankInBasket>0 THEN
      		gStBasket.aaProduct[sProductRef] = nRankInBasket
      	ELSE
      		RESULT ""
      	END
      ELSE
      	
      	// Stores the variation (its identifier)
      	nVariationID = gStBasket.arrBasket[nRankInBasket].nVariationID
      	// Stores the modification value
      	nNbRealModif = nNbModif
      	// Is the number of products limited in stock?
      	bProductIsLimited = bProductIsInLimitedQuantity(product.productid)
      	// Checks whether there is enough products or variations in stock
      	IF nVariationID > 0 THEN
      		IF bVariationIsInStock(nVariationID) = False THEN
      			Error(ReadBasketTextProductInsufficientStock())
      			BasketDeleteProduct(sProductRef)
      			RESULT sProductRef
      		ELSE
      			nNbInStock = nNbVariationsInStock(nVariationID)
      		END
      	ELSE
      		IF bProductIsInStock(product.ProductID) = False THEN
      			Error(ReadBasketTextProductInsufficientStock())
      			BasketDeleteProduct(sProductRef)
      			RESULT sProductRef
      		ELSE
      			nNbInStock = nNbProductInStock(product.ProductID)
      		END
      	END
      	
      	// If the stock is limited for this product AND if the number of articles is not null
      	IF bProductIsLimited _AND_ gStBasket.arrBasket[nRankInBasket].nNbArticles > 0 THEN
      		// Stores the number of articles
      		nNbArticleBefore = gStBasket.arrBasket[nRankInBasket].nNbArticles
      		// The product already exists in the basket, modify the number
      		gStBasket.arrBasket[nRankInBasket].nNbArticles = Min(nNbInStock, nNbArticleBefore+nNbModif)
      		// Stores the real modification
      		nNbRealModif = gStBasket.arrBasket[nRankInBasket].nNbArticles - nNbArticleBefore
      	ELSE
      		// The product already exists in the basket, modify the number
      		gStBasket.arrBasket[nRankInBasket].nNbArticles += nNbModif
      	END
      	
      END
      
      // If the number of elements is set to 0, remove the article from the basket
      IF gStBasket.arrBasket[nRankInBasket].nNbArticles=0 _AND_ bDeleteIfNull THEN
      	BasketDeleteProduct(sProductRef)
      	RESULT sProductRef
      END
      
      
      // Refreshes the global counters
      gStBasket.nNbArticles += nNbRealModif
      gStBasket.cyTotalPriceBT += nNbRealModif*gStBasket.arrBasket[nRankInBasket].cyUnitPriceBT
      gStBasket.cyTotalTax += nNbRealModif*gStBasket.arrBasket[nRankInBasket].cyUnitTax
      gStBasket.cyTotalPriceIOT += nNbRealModif*gStBasket.arrBasket[nRankInBasket].cyUnitPriceIOT
      
      // if the number of articles really modified differs from the requested number (if the number of articles in stock is not sufficient)
      IF bProductIsLimited _AND_ nNbRealModif <> nNbModif THEN
      	// Informs the user
      	Error(ReadBasketTextProductMaxStock())
      END
      
      RESULT sProductRef
     type : 458752
   -
     name : BasketQuantity
     internal_properties : CAAAAAgAAAAsilE77treZUHKrymt979ClBfMCK7g/nzbWRfQ5z67uV7nIjsctY0M+G0gLC4eGS4p9xrHoEoUb3DV9ecR15+f3TQnnmOjVIAkqIqOgApdn50rU/hoIK7nXNORHCQ1SsUhqV3ljIQfQkexWf0OK6vB5BthNCHggvnn9HzERKUIWCCaftn+Dk6p43UDWwJuJK/tnxSgwWvViGzKhjTjOeOpxeIogzxPhdy3qOqYEmb/zPbhOeZAEx+TmfsnoyYiKaYVTxASN/+dXCFh/LBGIGXRGLe+SWR+eMUf/VlVrQEL266SdwQ6Nw61yllAfTydAIK6EJFsbiNyhSd/xYPkDucTkCVp0E4r+2lQUK8rm/kPrilow8BZBRTuhA==
     procedure_id : 1416730110680999149
     type_code : 15
     code : |1-
      // Summary: Returns the number of products found in a basket
      // Syntax:
      //[ <Result> = ] BasketQuantity (<nRank> is int)
      //
      // Parameters:
      //	nRank (integer): subscript of the basket
      // Return value:
      // 	integer: Number of products
      //
      
      Procedure BasketQuantity( nRank is int )
      
      RESULT COL_EBusiness.gStBasket.arrBasket[nRank].nNbArticles
     type : 458752
   -
     name : CurrencyToString
     internal_properties : CAAAAAgAAABuia7au7nzPYI+uDModstchny54Du+k14Qw+I5+9aKvCa/H8Sq7gGp6uzIrgOJLRZciCjuj7uM8/+cPAPkwXaC2V55ThPU7LWf6Aoq/YcHNb6LILbOe1MQiFHng5e4sy5OgGa0YbBc0Z5m5s9iXG1Qff8cXYRwpKe/I2nz/A9leTbI5A29Lv+sGqVOsVUhPonBZOyLsbQGukgdOOnkhkXDo7wxRtCUqjDTHYtRh1JsHfKAP5+xyb8Iyuv/h+S6YSbimW6OxB6waAXQvA1X0W8fKNhSUoLxz2nFujMYNHz1f3AodrD+EoHzQ9aHiYjKMQOTH5vCSpmJT6WIkVpP9qDWJIJVwZpQwJvyXX2GsohxRynqmsuQGScm
     procedure_id : 1416730110681064685
     type_code : 15
     code : |1+
      // Summary: Returns the text of an amount
      // Syntax:
      //[ <Result> = ] CurrencyToString (<cuValue> is currency)
      //
      // Parameters:
      //	cyValue (currency): amount
      // Return value:
      // 	string: Text of the amount
      Procedure CurrencyToString( LOCAL cyValue is currency )
      
      
      sResult is string = NumToString(Round(cyValue,2),maskSystemCurrency)
      
      RESULT sResult
      
     type : 458752
   -
     name : BasketTotalTax
     internal_properties : CAAAAAgAAADyPQIO31uBo1iz5H4A/2uZIP74TCEoJRnfZsx+/aiSslAS1tlNlimWEfMIqu83RfhbhE4+f22y2X7aUuvIk7nBhGBN4l3yYunHWBSU/yETc5CZW3KziCEPtirY55xpHbb2bBRPu4hyKCqkLdzE/vq+V6FSYF322WMzB8th+hXZn+RqHEXj1bMg1pmuFRsnsHMX8mssGH3doWl+9yKt8bZEAAp347ykNtg/iMzMUwdVWmbCLQ9GdGCVtU43MEdKWiOQT8mYGssv11Jtx3okBND4yTFJe+niSuE6QFMMmG59lq/9r4d1NwANNwIh524IcJ28lALqpaveoCQnevHrgnNSG6nWwMPKtIElfBdsPbmZe4kKti88tbu6
     procedure_id : 1416730110681130221
     type_code : 15
     code : |1+
      // Summary: Total value BT of the basket
      // Syntax:
      //[ <Result> = ] BasketTotalTax ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	string: Total value BT of the basket
      
      Procedure BasketTotalTax()
      
      RESULT CurrencyToString(gStBasket.cyTotalTax)
     type : 458752
   -
     name : BasketValueBT
     internal_properties : CAAAAAgAAADnEB3wxjr6aJSHg0qI7larKpdqp/VX9jeY0R3+K4+X3CP8wSnU1ef6OWmFm7WadFIQ6pO6h8CNCxOQhyxvdq2Vg0VsbELlWrGdc+IqHoH+dKByq22fwu1Dk9UVig6H5Y26rv6qIM9w93cvPnZIUmwrAV58hTcdRTWyirRdwN7Wo8x+5lr2SyB7aJwiYPZFMjfISHDKFwRTdchKejuEK5zu22CSrYXxthDemHuW22HXNok4NRQaV5kIjh9vDxMjRyJeOby8RcmEjLvlDGCexj69ODixbMIsE3Ln9S6pSqokSTFHtzq/C/QU8x2o9hMWocCxm2gK4S+tv+rcbroY9yv8xslRMDlRvQvM6OK3akfTFJl5upVMW9w=
     procedure_id : 1416730110681195757
     type_code : 15
     code : |1+
      // Summary: Value BT of the basket
      // Syntax:
      //[ <Result> = ] BasketValueBT ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	string: Value BT of the basket
      
      Procedure BasketValueBT()
      
      RESULT CurrencyToString(gStBasket.cyTotalPriceBT)
     type : 458752
   -
     name : OrderPaymentToString
     internal_properties : CAAAAAgAAACAK+z3mbbIIRhYB+Em1DvOCTbOKiZhXcbaLNQRQep6e4wJq8rp9CCZUipGmI7oaV4aolajJlg1k5Ie3bYsLkRhubronEjo755wCCL7AwgnTH1yUjQUCdblo8Ary0arC7KiYfJSu9ygS1/aVRb/H2JP2K60tVPEz3R/NAN/5DT0aUmbQ7HC/WTRv6wONosPqsh6nw3gM1g=
     procedure_id : 1416730110681261293
     type_code : 15
     code : |1-
      // Summary: Used to retrieve the payment in letters from its value
      // Syntax:
      //[ <Result> = ] OrderPaymentToString (<nPaymentType>)
      //
      // Parameters:
      //	nPaymentType: Type of payment (PAYM_XXX constants)
      // Return value:
      // 	string: payment in letters from its value
      //
      
      Procedure OrderPaymentToString(nPaymentType)
      
      sPaymentType is string
      
      SWITCH nPaymentType 
      	CASE PAYM_CC
      		sPaymentType = "CC"
      	CASE PAYM_CHECK
      		sPaymentType = "Check"
      	CASE PAYM_WIRE
      		sPaymentType = "Bank wire"
      	CASE PAYM_PAYPAL
      		sPaymentType = "Paypal"
      	OTHER CASE
      		dbgAssert(False,"Unable to find the type of payment")
      		sPaymentType = "<Unknown>"				
      END
      
      
      RESULT sPaymentType
     type : 458752
   -
     name : OrderStatusToString
     procedure_id : 1416730110681326829
     type_code : 15
     code : |1-
      // Summary: Used to retrieve the status of the order in letters
      // Syntax:
      //[ <Result> = ] OrderStatusToString (<nOrderStatus>)
      //
      // Parameters:
      //	nOrderStatus: status of the order
      // Return value:
      // 	string: status of the order in letters
      //
      
      Procedure OrderStatusToString(nOrderStatus)
      
      sStatus is string
      
      SWITCH nOrderStatus
      
      	CASE ORD_WAITINGFORPAYMENT // Order waiting for payment
      		sStatus = "Waiting for payment"
      	CASE ORD_PREPARATION // Order paid, currently prepared
      		sStatus = "Currently prepared"
      	CASE ORD_DELIVERY // Order currently delivered
      		sStatus = "Delivery in progress"
      	CASE ORD_DELIVERED // Order delivered
      		sStatus = "Delivered"
      	CASE ORD_PAID_CC_NOTCHECKED
      		sStatus = "Paid, currently checked"
      	CASE ORD_PAID_CC_CHECKED
      		sStatus = "Paid and checked"	
      	CASE ORD_PAID_CC_SUSPECT
      		sStatus = "Paid, currently checked"	
      	CASE ORD_ORDER_CANCELED
      		sStatus = "Order canceled"
      	OTHER CASE
      		sStatus = "<Unknown>"		
      		dbgAssert(False,"Unknown order status")
      END
      
      
      RESULT sStatus
     type : 458752
   -
     name : OrderCreate
     internal_properties : CAAAAAgAAAADFxf16/dg93DcIxfrUZ3GzRgJokYFdKaLCcxDNNLO2AKk0NDnd32M4wKUFJHD6tPD4lfXA094MdhL3cjXj9UcknocyQb7hspyZoAPAPFNWPk95T7T1LLF658wqSn9GnN4XQoBK0Fk7K9ifoCOcErWdLPFkGtdQQQlJ1sd1v1bslU4enYWKh65n2V+1HdpqBb48zbNYppQhmUOePYoeIibv55/ITWxixIZ7Fv1WOXn8UTxlcmzRxnfEfQlmdXgSTDxmYgLlXHr7LVuxO00hPShWRT/uYpJEWe0jwodPyaqfNZS
     procedure_id : 1416730110681392365
     type_code : 15
     code : |1-
      // Summary: Creates a new order with a sequential number per day
      // Syntax:
      //[ <Result> = ] OrderCreate ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	string: Number of the new order
      
      Procedure OrderCreate()
      
      // The generated numbers have the following format:
      // OF01-YYYYMMDD-seqnum
      // OF01: order forms of the Web site
      // YYYYMMDD: creation date of the order form
      // seqnum: sequential number of the OF
      
      // Try to position on today's record and to lock it
      WHILE HReadSeekFirst(OrderNum,OrdersDate,DateSys(),hLockWrite)=False
      	// If no record was found, add it
      	IF HFound()=False THEN
      		OrderNum.OrdersDate = DateSys()
      		OrderNum.Number = 0
      		HAdd(OrderNum)
      	ELSE
      		// Record found but unable to lock
      		IF HErrorLock() THEN
      			CONTINUE
      		ELSE
      			// Other error
      			RESULT ""
      		END
      	END
      END
      
      // Reads the sequence number, increments it and updates the file
      nSequenceNum is int = OrderNum.Number + 1
      OrderNum.Number++
      IF HModify(OrderNum)=False THEN
      	gsCurrentError = ErrorInfo(errFullDetails)
      	
      	<COMPILE IF Configuration="eBusiness">
      		PageDisplay(page_error)		
      	<END>	
      
      END
      
      // Generates the OF number
      sOrderNum is string = "OF01-"+DateSys()+NumToString(nSequenceNum,"08d")
      
      // Creates the order record
      HReset(Orders)
      Orders.OrderNum = sOrderNum
      Orders.InvoiceNum = Null
      Orders.InvoicingAddressID = Null
      Orders.DeliveryAddressID = Null
      Orders.OrdersDate = DateSys()
      Orders.OrderTime = TimeSys()
      Orders.OrderStatus = ORD_WAITINGFORPAYMENT
      IF HAdd(Orders)=False THEN
      	// The addition failed
      	sOrderNum = ""
      END
      
      RESULT sOrderNum
      
      END:
      // In all cases, unlock the counter of numbers
      HUnlockRecNum(OrderNum,hCurrentRecNum)
     type : 458752
   -
     name : BasketToOrder
     internal_properties : CAAAAAgAAABmfbO7vHJ4CdyIV3wKfDJJOYWlGa7iiOecaWmaD5f30X1tWOnNz5HkzDLF2Vc0bc1kwVSZswTfMwGhHCbJLmzxwN7vpRE6mjH0Jy28xabkOm9UWioctIPZ5gnxxZjkYdHFeOyNnKrSTj9Db5lldal8NFAL2fZ0kZZlHt4VeJf2ZLm8mG40mI4Q/8o8bCAJgS7ZbKOZHR4aSRoP226zhkya9hVeQqovtS7HsVB05usZLJvbEyT56ooKEAPBMgOvP+Wdgo7C8tNVdPKD6X0I2UX4VCBD2elV6ascM6gmFaqy0zwKuJOsX9XJzK3VtystaacdRSEi4Io/AlDz9dRyuO1OKgsakZ76vH9U3JJ7jpZxIbl9tSgBCnsp4kdY52uR/Lg54mqVW8PTO7JxmMpXx6QsAR47+fyH4THsZMAzKJkEpGAxydkrbZmJJ7p5fNRvj8CE3UdW+Zs9wlouS3HB4FAadeSJk6RU2PjGI22FGtgEuRafDhJvyVB2uvZu351SHJUfq+/pWcnVggqXpE8tGpFv1MCkQY7u6GHjCgCEKzgIQFt5n19TVpIUIw+LOPxAn1X18Cjm/O9tBT0tbEDz0A==
     procedure_id : 1416730110681457901
     type_code : 15
     code : |1+
      // Summary: Transforms the current basket into order or updates the order
      // Syntax:
      //[ <Result> = ] BasketToOrder ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	boolean: True if the modification is performed, False if an error occurred
      
      Procedure BasketToOrder()
      
      // Create the order or find it
      IF gStBasket.nOrderID <> 0 THEN
      	IF HReadSeekFirst(Orders,OrderID,gStBasket.nOrderID)=False THEN
      		// Order expired, detach the basket
      		gStBasket.nOrderID = 0
      		RESULT False
      	END
      END
      
      IF gStBasket.nOrderID = 0 THEN
      	// Create the order
      	IF OrderCreate() = "" THEN
      		// If the order creation fails, it's a fatal error for the site
      		gsCurrentError = ErrorInfo(errFullDetails)
      		
      		<COMPILE IF Configuration="eBusiness">
      			PageDisplay(page_error)		
      		<END>		
      		
      		RESULT False	
      	END
      	// From now on, the basket is linked to an order
      	gStBasket.nOrderID = Orders.OrderID
      END
      
      // Deletes the order lines if any
      QRY_ClearOrder.pIDOrder = gStBasket.nOrderID
      IF HExecuteQuery(QRY_ClearOrder) = False THEN
      	gsCurrentError = ErrorInfo(errFullDetails)
      	
      	<COMPILE IF Configuration="eBusiness">
      		PageDisplay(page_error)		
      	<END>	
      	
      	RESULT False	
      END
      
      // Refreshes the values in cache in the basket
      BasketRefresh()
      
      // Create the order lines
      Orders.TotalBT = 0
      Orders.TotalIOT = 0
      FOR EACH stLine of gStBasket.arrBasket
      	// Find the product and its tax rate
      	IF bReadProductAccordingToReference(stLine.sProductRef)=False _OR_ HReadSeekFirst(TaxRate,TaxRateID,product.TaxRateID)=False THEN
      		
      		<COMPILE IF Configuration="eBusiness">
      			PageDisplay(page_error)		
      		<END>	
      		
      		RESULT False	
      	END
      	
      	// Create the order line
      	HReset(OrdLine)
      	OrdLine.ProductCaption = stLine.sArticleCap
      	OrdLine.Quantity = stLine.nNbArticles
      	OrdLine.UnitPriceBT = stLine.cyUnitPriceBT
      	OrdLine.TaxRate = TaxRate.Rate
      	OrdLine.LineTotal = (stLine.cyUnitPriceBT+stLine.cyUnitTax) * stLine.nNbArticles
      	OrdLine.OrderID = gStBasket.nOrderID
      	bReadProductAccordingToReference(stLine.sProductRef)
      	OrdLine.Reference = product.Reference
      	OrdLine.Discount = (product.UnitPriceBT - stLine.cyUnitPriceBT) * stLine.nNbArticles
      	
      	OrdLine.ProductVariationID = stLine.nVariationID
      	
      	IF HAdd(OrdLine)=False THEN
      		gsCurrentError = ErrorInfo(errFullDetails)
      		
      		<COMPILE IF Configuration="eBusiness">
      			PageDisplay(page_error)		
      		<END>
      	
      		RESULT False
      		
      	ELSE
      		
      		// Is the stock management enabled for this product?
      		IF bProductIsInLimitedQuantity(product.productid) THEN
      			
      			// Modifies the stock for the variation or for the product
      			IF stLine.nVariationID > 0 THEN
      				// If the variation is in stock
      				IF bVariationIsInStock(product.productid) THEN
      					// Reduces its stock
      					ReduceVariationStock(stLine.nVariationID, stLine.nNbArticles)
      				ELSE
      					// The order must be canceled: the product is not available anymore
      					RESULT False
      				END
      			ELSE 
      				// If the product is in stock
      				IF bProductIsInStock(product.productid) THEN
      					// Reduces its stock
      					ReduceProductStock(product.productid, stLine.nNbArticles)
      				ELSE
      					// The order must be canceled: the product is not available anymore
      					RESULT False
      				END
      			END
      			
      		END
      		
      	END
      	
      	Orders.TotalBT += (stLine.cyUnitPriceBT*stLine.nNbArticles)
      	Orders.TotalIOT += (stLine.cyUnitPriceBT+(stLine.cyUnitPriceBT * TaxRate.Rate) / 100) * stLine.nNbArticles
      	
      END
      
      // Add the shipping costs
      Orders.ShippingCostIOT = gStBasket.cyDeliveryCostIOT
      Orders.ShippingCostBT = 	gStBasket.cyDeliveryCostBT
      
      IF HModify(Orders)=False THEN
      	gsCurrentError = ErrorInfo(errFullDetails)
      	
      	<COMPILE IF Configuration="eBusiness">
      		PageDisplay(page_error)		
      	<END>
      	
      	RESULT False
      END
      
      RESULT True
     type : 458752
   -
     name : BasketRefresh
     internal_properties : CAAAAAgAAAABUddsDhkn6Fl0+dW6FYgFdSyf0SKjZWYhKimR4d6fnOo/KU3JJk/Ts13ooxjFMjH2JU4VqzzZB+A8PYQi386yuZkaa+/5efE2mocFRE1K5JkupgJGiKeV23qgmBVV5Bx3Xm7i1YOTWBWSUp5CoQQggoxlI5k5f7qV3H76+oI3162Qmyk/gQ73C+b6Do2UqtbdGbvnxePc8XEATmZ+0OpC86jHZE3ejlOYNCm6lyIiEAMuFI3vSpLR9idi+AoGiIM+ANXFxpeQzhiAVjTMNYyJ2gKzBGMmU0akwpEF2gXW1Bl3nIGarUS7LzO1q9hMY8vi0PGwgGmFroTvoBE6ieKjrwS7lF7fk91QeKHRZFiJ/yftBRUxiXRroUyH99mh2nno2YoUscxa2NSjGD8gTd1HDMpa+BCGKooPnr2RR1PVAVD8MdNR9PYYnEAOaZiVPKBMR32Ux6GmeHZpiMyX1EkmWJEaFmltbHEVBDocF+62gBxE7h598cdrsZke9cZcEjEEgJkc7vU80nievBZ9+Y7af1RWPY8k8hFRvJkS/oXLxJVpV4kItiPt67tofBnsj4eiHwjWJq9Z6oyxxQ1kUOLnamksNmwnuA695U3XvbcWXCPV1Ceak09C31F0rhdGA4jsT5QbuZD8lpvgYtZbECRedAwbz5ZhFN2SkTIX/TKZ0x1cRkyBnWCyak5qIc9JmKKECH1hcHieVOCSFFEMcU0aVTfpz0xBcNa7vtl6mc3PgXHBXCpL5YsBCoI8MRFPuYz3DpFithrCJK2GpfJQzOknCp2uhnt+1CruER+t0xyZqWPmhIybdYrJYB0nF8S9M94AH/nx5AxdQlDtmhxd5U8a+5YuwW8HY8d+b9Za8SJ7Jfs0ItOm0UivYkt0qqYX+rj/RyU6AdtA/7mV2YozazYUxKAOkn9TbcWsDWn99o86RqaYVRVLaoHsqJBxmpE1SIOK2e9UplYT0kishxvLml8IBP+ogOC7USQBse6Vo36ZPnLk1PK/Z1g3Yh/aHaCS6E2LmI9XM6PyXqxvZe+/NewL16Hc7uSRCoouCjOOTzKJZg6CiW51Rf0qHauad6PjYHTPxan4hGP9dpWgUgzr6DpEZKK8UxC8kdoAlb552gBpLWHZk+vfQsxjVKNKcDLdKyLCKlSqMRRAJ2YAMnR4UjRN2WfJdpP/xfC1L7GlWr0rwasmFOJRlpvcs3blwYYjzRs2qlxmA8tmI48JOl7NhQlVyOH+kNk4dOhooOUbXlrAr8MR3GrKrEoGr/CZqkUBaFsJW9eENYmprZxy3Z07qMqQzlZQpwXfZAP2ORf25ybP/FmeC3Wz8wdLK6gC7gmZapwHg3aga6sasXBP3s9Q9H4taOx+Axc6A4rYNut7wV6nOtEk9PM=
     procedure_id : 1416730110681523437
     type_code : 15
     code : |1-
      // Summary: Refreshes the basket
      // Syntax:
      // BasketRefresh ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	None
      
      Procedure BasketRefresh()
      
      FOR EACH stLine of gStBasket.arrBasket
      	// Find the product and its tax rate
      	IF bReadProductAccordingToReference(stLine.sProductRef)=False _OR_ HReadSeekFirst(TaxRate,TaxRateID,product.TaxRateID)=False THEN		
      		
      	<COMPILE IF Configuration="eBusiness">
      		PageDisplay(page_error)		
      	<END>		
      	
      	END
      	
      	// Update the basket			
      	stLine.sArticleCap = product.ProductCaption
      	stLine.cyUnitPriceBT = product.UnitPriceBT
      	stLine.cyUnitTax = (product.UnitPriceBT * TaxRate.Rate) / 100
      	
      	// If a promotion is defined
      	IF stLine.nPromotionID > 0 THEN
      		// Finds the promotion
      		HReadSeekFirst(Promotion,PromotionID,stLine.nPromotionID)
      		IF HFound(Promotion) THEN
      			// Retrieves the price defined for the promotion
      			stLine.cyUnitPriceBT = Promotion.UnitPriceBT
      			stLine.cyUnitTax = (Promotion.UnitPriceBT * TaxRate.Rate) / 100	
      		END
      	END
      	
      END
     type : 458752
   -
     name : OrderModifyAddress
     internal_properties : CAAAAAgAAAAMKLJxqoUSdzL+shtbQwLio7dvC83jEfhqFsdkh3htWixt8pnYEyrFd/SlaXuFjfBWF9mofbzyD9vN8+PCy6OCK0rJzE9L7N0R7W77dP4AdNJays9GCir1MEeLYx/itLVfQiGBLTP8G1d1NjlwlGRNb6KUC1/MUjzpqlF/1DLd9rPwmR67j7ZlorHvuSk5xXtBYBE5f+tsA6zMnpeZEiErHStdDhxev/S9+bcTISM20oy+VZFQmLjHJtAAgRUW/IY10Vs8/QN+I5SLlxzdibgDQ+LNyocBx1MOmTNNPx+homHqk9E7iNM10rktivScv9SsjeVhA7W7Ygo4wZttiYkoVLSv14nz0Opu3fb4dff6314bY4k5G3e4AGdbNaYVFDxMfuc2KYFnhEji5W9zs+XL0sUCVRRhJQsdIc7l+zUhDzdRwfeicuMcwrQA1vaIoDpUcZKknStjjzmA7yaXkqedGd3+pBjJS4T7mXNlvjYqve6xem0Pgd1Xienl1d0wxKM2mU3JSA6WBAdZC94wIEBmYCu0GlKFHI/K1qK3OXKZF9LWrqYL8LMvy57MiHmyPgdCKIU8nErEVVHCtEkzQglFNiAB7BkwWdBXiB6xQgwDWrcDuS+oDnuzYAxVUVS1zcuQlnkKMcArE8piK1mAT63olQY1d/u7Fe3enDkff5LO99arnSsZ2Bvp8ZpCGY5vEQc0lz7X9bsvPPdvxa5xsPYXeML2ikfg8Dl03sUewh7HDbRSK6stYyjtV7SYCCcCevn7zuBWV+VMp+WsCqPw5m75lT95ZbV8k41qDv3UiluwKVaUJLloJTqoPYKv+NBOkhhAiCFLGHSj3Wx6Acv4cWh0p1nAUNYYe2KTr0VjMDhWba3+M/UTbJ6L7n5vjLv0LEv5GtFHjTohT9tI2A0rJl4++T/FjZBLC/g72+vj2wYMXkiP2FWMQSfD+IRCv7uyxXgrLRqeNOpxcoZCrf8zs/hr8TonmQrBzZD4J14cAhtwwV0qr5KaeQw9ptWPGFn5An14tTm6B/6jcajBj/tTqceW3MHVOqUWBCma0u8iK78J4uibdEB/M52g28SxKzJ0xi7mVTy2pgiZ0qo8lSlytc/DWW2KoNusx5BboY/+YSu8OHVwdoKtzWUQxIHmnxX7NPfvyegM/ZAK4bQXBiAtPOFGv1xiE6TnioDjwDpu5qyyF4daYudeTCVJB1tEcXatDy4vrOvzH7VCzJk+CLp2G3XtgC1ME8v6WJ9MClVwHzeaGw1vM6Bbr5sIjPOqgjVNlUR6bToXlOjkfWqf9w8kG3vkZDLpUfR3tBTyjsjHQlp71dAi4+HrLcxkrZFgK5iRAkeOw95LuONi6dq4i8eqyLwukowSn2Ev7BrKLNcc8Bby/X2SAjNHhy4IK79TfppesWIh+UT9wiL1ICwtwqOFO9fhN2KCnV5oe2n65gcRttipC6zgTJVLsxl0Ho5XI7r6xdLGAFIeMQJY3gFVt2+2ziFh2RwdH06hEdJyz3Fc1YtgIkbWuvG8DPQCvTV10zlsatOkTJwtecBx17ep7+CdX9eQKobBG7LMo5wyiloCRuSjN9cfqUG3ffJovYsvKf1RrUCACe4zXAGKLZtyA9gq426JjPiU/T2hQbtfx42SV5mB+Ka9Cq+7KmYUnyDRqk0VXUOFOHvtK89xUoL/vd7qcp8+0ezo8wPV2cXLZQ==
     procedure_id : 1416730110681588973
     type_code : 15
     code : |1-
      // Summary: Modifies the address of an order
      // Syntax:
      //[ <Result> = ] OrderModifyAddress ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	boolean: True if the modification was performed, False otherwise
      Procedure OrderModifyAddress()
      
      dbgAssert(COL_EBusiness.gStBasket.nOrderID<>0,"An order must be currently processed to use this function")
      IF COL_EBusiness.gStBasket.nOrderID=0 THEN	
      	RESULT False
      END
      
      // Local variables
      bModifAddress is boolean 
      
      // Positions on the order
      IF HReadSeekFirst(Orders,OrderID,gStBasket.nOrderID)=False THEN
      	gsCurrentError = ErrorInfo(errFullDetails)
      	
      	<COMPILE IF Configuration="eBusiness">
      		PageDisplay(page_error)		
      	<END>
      	
      	RESULT False
      END
      
      // If an invoicing address is found
      IF gStBasket.nInvoicingAddressID<>0 THEN
      	// Position on it
      	IF HReadSeekFirst(Address,AddressID,gStBasket.nInvoicingAddressID) THEN
      		dbgAssert(Address.CustomerID=gStBasket.nCustomerID,"The invoicing address does not belong to the current customer")
      		// If the address was already defined
      		bModifAddress = Orders.InvoicingAddressID<>0
      		IF bModifAddress THEN
      			IF HReadSeekFirst(ArchiveAddress,AddressID,Orders.InvoicingAddressID)=False THEN
      				bModifAddress = False
      			END
      		END
      		// Copies the values
      		HCopyRecord(ArchiveAddress,Address)
      		IF bModifAddress THEN
      			IF HModify(ArchiveAddress)=False THEN
      				gsCurrentError = ErrorInfo(errFullDetails)
      				
      				<COMPILE IF Configuration="eBusiness">
      					PageDisplay(page_error)		
      				<END>
      				
      				RESULT False
      			END
      		ELSE
      			IF HAdd(ArchiveAddress)=False THEN
      				gsCurrentError = ErrorInfo(errFullDetails)
      				
      				<COMPILE IF Configuration="eBusiness">
      					PageDisplay(page_error)		
      				<END>			
      			
      				RESULT False
      			END
      			Orders.InvoicingAddressID = ArchiveAddress.AddressID
      			IF HModify(Orders)=False THEN
      				gsCurrentError = ErrorInfo(errFullDetails)
      				
      				<COMPILE IF Configuration="eBusiness">
      					PageDisplay(page_error)		
      				<END>			
      						
      				RESULT False
      			END
      		END
      	END	
      END
      
      // If a delivery address is found
      IF gStBasket.nDeliveryAddressID<>0 THEN
      	// Position on it
      	IF HReadSeekFirst(Address,AddressID,gStBasket.nDeliveryAddressID) THEN
      		dbgAssert(Address.CustomerID=gStBasket.nCustomerID,"The delivery address does not belong to the current customer")
      		// If the address was already defined
      		bModifAddress = Orders.DeliveryAddressID<>0
      		IF bModifAddress THEN
      			IF HReadSeekFirst(ArchiveAddress,AddressID,Orders.DeliveryAddressID)=False THEN
      				bModifAddress = False
      			END
      		END
      		// Copies the values
      		HCopyRecord(ArchiveAddress,Address)
      		IF bModifAddress THEN
      			IF HModify(ArchiveAddress)=False THEN
      				gsCurrentError = ErrorInfo(errFullDetails)
      				
      				<COMPILE IF Configuration="eBusiness">
      					PageDisplay(page_error)		
      				<END>				
      				
      				RESULT False
      			END
      		ELSE
      			IF HAdd(ArchiveAddress)=False THEN
      				gsCurrentError = ErrorInfo(errFullDetails)
      				
      				<COMPILE IF Configuration="eBusiness">
      					PageDisplay(page_error)		
      				<END>				
      
      				RESULT False
      			END
      			Orders.DeliveryAddressID = ArchiveAddress.AddressID
      			IF HModify(Orders)=False THEN
      				gsCurrentError = ErrorInfo(errFullDetails)
      				
      				<COMPILE IF Configuration="eBusiness">
      					PageDisplay(page_error)		
      				<END>				
      				
      				RESULT False
      			END
      		END
      	END	
      END
      
      RESULT True
     type : 458752
   -
     name : BasketDeleteAll
     procedure_id : 1416730110681654509
     type_code : 15
     code : |1+
      // Summary: Deletes the entire basket content
      // Syntax:
      // BasketDeleteAll ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	None
      //
      
      Procedure BasketDeleteAll()
      
      // Basket Content
      ArrayDeleteAll(gStBasket.arrBasket)
      // "Cache" variables to limit the number of calculations on the server
      ArrayDeleteAll(gStBasket.aaProduct)
      gStBasket.nNbArticles = 0
      gStBasket.cyTotalPriceBT = 0
      gStBasket.cyTotalTax = 0
      // Delivery variables
      gStBasket.cyDeliveryCostBT = 0
      gStBasket.cyDeliveryCostIOT = 0
      // Total value of basket IOT, including the shipping costs (total amount to pay)
      gStBasket.cyTotalPriceIOT = 0
      
      // Variables used by the conversion channel
      // gStBasket.nCustomerID  // only this variable is stored (the end of order does not trigger the disconnection)
      gStBasket.nDeliveryAddressID = 0
      gStBasket.nInvoicingAddressID = 0
      gStBasket.nOrderID = 0
     type : 458752
   -
     name : ProductGetPhoto
     procedure_id : 1416730110681720045
     type_code : 15
     code : |1+
      // Summary: Returns the photo of a product
      // Syntax:
      //[ <Result> = ] ProductGetPhoto ([<sProductRef> is string[, <nProductID> is int [, <nPhotoRole> is int [, <bPath> is boolean]]]])
      //
      // Parameters:
      //	sProductRef (string - default value=""): Reference of the product
      //	nProductID (integer - default value=-1): Identifier of the product
      //	nPhotoRole (integer - default value=0): Role of the photo (ROLE_XXX constants)
      //	bPath (boolean - default value=1): True to return a path, False otherwise
      // Return value:
      // 	Undefined type: Photo of the product
      
      Procedure ProductGetPhoto( LOCAL sProductRef is string = "" , LOCAL nProductID is int = -1 , LOCAL nPhotoRole is int = ROLE_PHOTO_NORMAL, LOCAL bPath is boolean = True  )
      
      // Local variables
      nPhotoNum		is int
      
      // Search by reference
      IF nProductID=-1 THEN
      //	HReadSeekFirst(Product,Reference,sProductRef)
      	IF bReadProductAccordingToReference(sProductRef) = True THEN
      	//If HFound(Product) = False then
      		nProductID = product.ProductID
      	END
      END
      
      // Find the default photo (to get its number)
      HReadSeekFirst(ProductPhoto,ByDefaultProductID,[True,nProductID])
      IF HFound(ProductPhoto) = True THEN
      	nPhotoNum = ProductPhoto.PhotoNumber
      END
      
      // Find the photo corresponding to the requested role
      HReadSeekFirst(ProductPhoto,ProductIDPhotoNumberRole,[nProductID,nPhotoNum,nPhotoRole])
      IF HFound(ProductPhoto) = False THEN
      	// Try with the other photos
      	// Find the photo corresponding to the requested role
      	HReadSeekFirst(ProductPhoto,ProductIDRole,[nProductID,nPhotoRole])
      	IF HFound(ProductPhoto) = False THEN	
      		// Find the default photo
      		HReadSeekFirst(ProductPhoto,ByDefaultProductID,[True,nProductID])
      		IF HFound(ProductPhoto) = False THEN
      			// Take the first photo that was found
      			dbgAssert(False,"We search for an image while it is not the image of the role or the default one")
      			HReadSeekFirst(ProductPhoto,ProductID,nProductID)	
      			IF HFound(ProductPhoto) = False THEN
      				ProductPhoto.Photo =""		
      			END
      		END	
      	END
      END
      
      IF bPath THEN
      	dbgAssert(ProductPhoto.Photo<>"","No photo was found")
      	IF InAWPMode() = True THEN
      		RESULT ProductPhoto.Photo	
      	ELSE
      		RESULT "UK/"+ProductPhoto.Photo
      	END
      	
      	
      ELSE
      	dbgAssert(ProductPhoto.Binary<>"","No photo was found")
      	//dbgAssert("Using generated images is not recommended: the processes are slower, the images are not referenced and not supported by the browser cache")
      	RESULT ProductPhoto.Binary
      END
     type : 458752
   -
     name : BasketModifyProductCharacteristic
     procedure_id : 1416730110681785581
     type_code : 15
     code : |1+
      // Summary: Modifies the characteristics of a product found in the basket
      // Syntax:
      //BasketModifyProductCharacteristic (<sProductRef> is string, <sCharacteristicName> is string, <vCharacteristicValue>)
      //
      // Parameters:
      //	sProductRef (string): Reference of the product
      //	sCharacteristicName (string): Name of the characteristic
      //	vCharacteristicValue: Value of the characteristic
      // Return value:
      // 	None
      //
      // Example:
      // BasketModifyProductCharacteristic("REF1","size","XL")
      //
      Procedure BasketModifyProductCharacteristic(sProductRef is string, sCharacteristicName is string, vCharacteristicValue)
      
      // Retrieves the rank of the product in the basket
      nRankInBasket is int = gStBasket.aaProduct[sProductRef]
      dbgAssert(nRankInBasket>0,"Deleting a non-existing item")
      
      // Modifies the characteristic for the product found in the basket
      gStBasket.arrBasket[nRankInBasket]:aaCharacteristic[sCharacteristicName] = vCharacteristicValue
     type : 458752
   -
     name : BasketIsEmpty
     procedure_id : 1416730110681851117
     type_code : 15
     code : |1-
      // Summary: Indicates whether the basket is empty
      // Syntax:
      //[ <Result> = ] BasketIsEmpty ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	boolean: True if the basket is empty (no article), False otherwise
      //
      
      Procedure BasketIsEmpty()
      
      RESULT (gStBasket.nNbArticles=0)
     type : 458752
   -
     name : BasketGetProductCharacteristic
     internal_properties : CAAAAAgAAAB/avsxRcaqSwKugTRVsznrP+b18z7B9ckLCkhGVJ80z2I4nEfEDJVF7a9OpkfbdCwZHaFY3tdMzzwfyN8TlSH+uS4ha58tRE6V+SoYxIC1hkdtxbW0IuuIEZo5r+PxuzHvSZk0S1dughhDkBxl7WINBYUTO35XeA2j2iKrHB/bExCAqlO1IEq2kIupNg==
     procedure_id : 1416730110681916653
     type_code : 15
     code : |1-
      // Summary: Modifies the characteristics of a product found in the basket
      // Syntax:
      //[ <Result> = ] BasketGetProductCharacteristic (<sProductRef> is string[, <sCharacteristicName> is string])
      //
      // Parameters:
      //	sProductRef (string): Reference of the product
      //	sCharacteristicName (string - default value=""): Name of the characteristic to retrieve, empty string to retrieve all
      // Return value:
      // 	Undefined type: Value of the characteristic or string in the following format: <name>+tab+value+CR+<name>+tab+<value>...
      //
      // Example:
      // BasketGetProductCharacteristic("REF1","size")
      //// Automatic process of errors: RESULT ""
      //
      
      Procedure BasketGetProductCharacteristic(sProductRef is string, sCharacteristicName is string="")
      
      // Retrieves the rank of the product in the basket
      nRankInBasket is int = gStBasket.aaProduct[sProductRef]
      dbgAssert(nRankInBasket>0,"Deleting a non-existing item")
      
      
      // If we want to retrieve a characteristic
      IF sCharacteristicName <> "" THEN
      	
      	// Returns the characteristic of the product
      	RESULT gStBasket.arrBasket[nRankInBasket]:aaCharacteristic[sCharacteristicName]	
      	
      ELSE // If we want to retrieve all the characteristics
      	
      	sListBox is string
      	FOR ALL ELEMENT vValue, sName of gStBasket.arrBasket[nRankInBasket]:aaCharacteristic
      		sListBox += [CR] + sName +TAB+ vValue
      	END
      	RESULT sListBox
      	
      END
     type : 458752
   -
     name : _sBuildReference
     procedure_id : 1416730110681982189
     type_code : 15
     code : |1-
      // Summary: Builds the reference of the product according to the characteristics
      // Syntax:
      //[ <Result> = ] _sBuildReference (<sProductRef> is string, <aaCharacteristics> is associative array)
      //
      // Parameters:
      //	sProductRef (string): Initial reference of the product
      //	aaCharacteristics (associative array): Array of characteristics
      // Return value:
      // 	Undefined type: Reference of the product
      //
      
      Procedure PRIVATE _sBuildReference(sProductRef is string, aaCharacteristics is ASSOCIATIVE ARRAY of variants)
      
      // Local variables
      bufCharacteristicString	is buffer
      
      // Serialize the array of characteristics
      Serialize(aaCharacteristics,bufCharacteristicString,psdXML)
      
      // Return the unique reference
      RESULT sProductRef+csReferenceSeparator+HashString(HA_CKSUM_16,bufCharacteristicString)
     type : 458752
   -
     name : bReadProductAccordingToReference
     procedure_id : 1416730110682047725
     type_code : 15
     code : |1-
      // Summary: Reads a record found in the product database according to its reference
      // Syntax:
      //[ <Result> = ] bReadProductAccordingToReference (<sReference> is string)
      //
      // Parameters:
      //	sReference (ANSI string):Reference of the product to read
      
      // Return value:
      Procedure bReadProductAccordingToReference(LOCAL sReference is string)
      
      IF Position(sReference,csReferenceSeparator,1)>=0 THEN
      	IF HReadSeekFirst(product,Reference,ExtractString(sReference,1,csReferenceSeparator))=False THEN
      		dbgAssert(False,"Attempt to read an unknown product")
      		RESULT False
      	END
      ELSE
      	IF HReadSeekFirst(product,Reference,sReference)=False THEN
      		dbgAssert(False,"Attempt to read an unknown product")
      		RESULT False
      	END
      END
      
      RESULT True
     type : 458752
   -
     name : DisplayableAddress
     procedure_id : 1416730110682113261
     type_code : 15
     code : |1-
      // Summary: Used to retrieve a display address
      // Syntax:
      //[ <Result> = ] DisplayableAddress (<nAddressID> is int, <nOption> is int)
      //
      // Parameters:
      //	nAddressID (integer): Identifier of the address
      //	nOption (integer): option for choosing the address (address archived or not)
      
      Procedure DisplayableAddress(nAddressID is int, nOption is int )
      
      bArchivedAddress is boolean = (BinaryAND(nOption,ADDR_ARCHIVE)>0)
      
      dsAddress is data source
      sAddress is string
      // Create an alias on the proper file and we will be using this alias
      IF bArchivedAddress THEN
      	HAlias(ArchiveAddress,dsAddress)
      	HChangeName(dsAddress, ArchiveAddress..PhysicalName)
      ELSE
      	HAlias(Address,dsAddress)
      	HChangeName(dsAddress, Address..PhysicalName)
      END
      
      // Search for the address
      HReadSeekFirst(dsAddress,AddressID,nAddressID)
      IF HFound(dsAddress) THEN
      	
      	// Format the address
      	sAddress = FormatAddress("",dsAddress.Company,dsAddress.Road, dsAddress.Complement, dsAddress.ZipCode, dsAddress.City, dsAddress.StateProvince, dsAddress.Country)
      	
      END
      
      // return the formatted address
      RESULT sAddress
      
      END:
      HCancelAlias(dsAddress)
     type : 458752
   -
     name : TitleToString
     procedure_id : 1416730110682178797
     type_code : 15
     code : |1-
      // Summary: Returns the title of the person in clear from a subscript
      // Syntax:
      //[ <Result> = ] TitleToString (<nTitle> [, <bAbbreviated>])
      //
      // Parameters:
      //	nTitle: Subscript for the title (1, 2 or 3)
      //	bAbbreviated (default value=1): True to get an abbreviated format (Mr, Mrs, Ms), False to get the full title (Mister, Madam, Miss)
      // Return value:
      // 	string: Title in clear
      //
      Procedure TitleToString(nTitle, bAbbreviated = True)
      
      
      // Abbreviated format
      IF bAbbreviated THEN
      	// According to the title
      	SWITCH nTitle
      		CASE 1 // Mr
      			RESULT "Mr"
      		CASE 2 // Mrs
      			RESULT "Mrs"
      		CASE 3 // Miss
      			RESULT "Ms"
      		OTHER CASE
      			dbgAssert(False,"Unknown title")
      			RESULT ""
      	END
      
      ELSE // Full format
      	
      	// According to the title
      	SWITCH nTitle
      		CASE 1 // Mr
      			RESULT "Mister"
      		CASE 2 // Mrs
      			RESULT "Madam"
      		CASE 3 // Miss
      			RESULT "Miss"
      		OTHER CASE
      			dbgAssert(False,"Unknown title")
      			RESULT ""
      	END
      	
      END
     type : 458752
   -
     name : AddressFullName
     procedure_id : 1416730110682244333
     type_code : 15
     code : |1-
      // Summary: Used to retrieve the full name of an address
      // Syntax:
      //[ <Result> = ] AddressFullName (<nAddressID> is int, <nOption> is int)
      //
      // Parameters:
      //	nAddressID (integer): Identifier of the address
      //	nOption (integer): option for choosing the address (address archived or not)
      
      Procedure AddressFullName(nAddressID is int, nOption is int )
      
      // Local variables
      bArchivedAddress is boolean = (BinaryAND(nOption,ADDR_ARCHIVE)>0)
      dsAddress is data source
      
      // Create an alias on the proper file and we will be using this alias
      IF bArchivedAddress THEN
      	HAlias(ArchiveAddress,dsAddress)
      	HChangeName(dsAddress, ArchiveAddress..PhysicalName)
      ELSE
      	HAlias(Address,dsAddress)
      	HChangeName(dsAddress, Address..PhysicalName)
      END
      
      // Search for the address
      HReadSeekFirst(dsAddress,AddressID,nAddressID)
      IF HFound(dsAddress) THEN
      	// Return the full name
      	RESULT dsAddress.FullName
      END
      
      // Return an empty string
      RESULT ""
      
      END:
      HCancelAlias(dsAddress)
     type : 458752
   -
     name : ValidateOrderPayment
     internal_properties : CAAAAAgAAAABvyTDi+1Sj/z9jzZpGc+GWPfq2I0ePdn3xjLkhlFbdd8tPkXpPHNTce9/zdVk8mqhetSYsXHkV478kKgxe55DHzXMx1ITqymYOP17fF8DTVqzKQLeYtR2KI9iNGriw++NWbI+kZ4FSwm7cJx9W2hEByebmErBokkAvWwuS/lNgH6gwkoz5ksm0v/hG+CJmqzF8dd4mAHUV8c9OLhupwfExCkcOG+Sc/jBFaZR8gsf/VYu6EiLZXm/C83Zc/0AC/WkaDVTed2IbsoyGq6tTPyAprDdIknFauVmeFXzM5UQsoELDub04w==
     procedure_id : 1416730110682309869
     type_code : 15
     code : |1+
      // Summary: Saves an order as "paid"
      // Syntax:
      //ValidateOrderPayment (<nOrdeIDr> is int, <sListParam> is ANSI string, <nOrderStatus> is int, <nPaymentMode> is int)
      //
      // Parameters:
      //	nOrderID (integer): Identifier of the order
      //	sListParam (ANSI string): List of incoming parameters
      //	nOrderStatus (integer): New status of the order
      //	nPaymentMode (integer): Payment method
      // Return value:
      // 	None
      //
      
      Procedure ValidateOrderPayment(nOrderID is int, sParamList is string,  nOrderStatus is int, nPaymentMode is int)
      
      // Find the order
      HReadSeekFirst(Orders,OrderID,nOrderID)
      IF HFound(Orders) = False THEN
      	AddError("Unable to find the order")
      	RETURN
      END
      
      // Configure the order
      Orders.OrderStatus = nOrderStatus
      Orders.ListPaymentParameters = sParamList
      IF HModify(Orders) = False THEN
      	AddError("Unable to save the order:"+Orders.OrderNum)
      	RETURN
      END
      	
      // The order confirmation is sent immediately		
      SendOrderConfirmation(Orders.OrderID,nPaymentMode)
      
      // Clears the basket
      COL_EBusiness.BasketDeleteAll()
      
      // Notification in case of error
      IF ReadNotificationIfOrderEnabled() = True THEN
      	SendMessageToWebmaster("New order on the site",...
      	StringBuild("An order was placed on the site on %1 at %2: $%3",DateToString(DateSys(), maskSystemDate),TimeToString(TimeSys(),maskSystemTime),Orders.TotalIOT))
      END
      
      // Summary page
      <COMPILE IF Configuration="eBusiness">
      	PageDisplay(customer_orders)		
      <END>
     type : 458752
   -
     name : BasketCheckAvailability
     internal_properties : CAAAAAgAAABJ8AaetT5MnanmCZiI1Rtnz0nu4T3WmQFS5CrCl9ZTPZdu6I90brhm1Z5w1yD0TDyv8LQe/KRcBYZOg0/Ep0K828SN/KLURS9f5ke547tgH4YcsmXRUVzJz3fZTYFJuZigPOd+pMIDp4EAlbIzvHkI01aF7oZJYc9AMj3XOov5VOXm6RFWTRzBxq4h+mA9iuZfZoRfIGs9YQm6c4LIuAIwRjRft85cdMRBKPYOMchjDoZlCy9sfqgXdafEzuLrJ3uY4I8oOR0UEU9EXc8E3sX60IEJH2qv01Le4vB+Dt+tAmE/pGCWRzQuxs1EvD7OnR3cRXWZT/8k6EBIblyDsZKCxrNGOG7Z/LHVABFeNm1UiEbVMwJYEOIjzal1SRI7ZqU=
     procedure_id : 1416730110682375405
     type_code : 15
     code : |1+
      // Summary: Checks the basket content to check whether a product it is out of stock (or whether a number of products exceeds the stock)
      // Syntax:
      //[ <Result> = ] BasketCheckAvailability ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	ANSI string: List of modified products in the following format REFERENCE<TAB>CAPTION<TAB>VariationID<TAB>CHARACTERISTICS<TAB>MODIF/DEL
      //
      
      Procedure BasketCheckAvailability()
      
      // No check if the basket is empty
      IF BasketIsEmpty() THEN RESULT ""
      
      
      sListOutOfStockProducts is string
      bProductStock is boolean
      sAnOutOfStockProduct is string
      sCharacteristics is string
      nNbStock is int
      bModifiedQuantity is boolean
      bDeletedProduct is boolean
      
      
      // Browses the basket lines
      FOR EACH stLine of COL_EBusiness.gStBasket.arrBasket
      	
      	sAnOutOfStockProduct = ""
      	bModifiedQuantity = False
      	bDeletedProduct = False
      	bProductStock = False
      	nNbStock = 0
      	
      	// Find the product
      	IF bReadProductAccordingToReference(stLine.sProductRef) THEN
      		
      		// Is there a limited number of products?
      		IF bProductIsInLimitedQuantity(product.productid) = False THEN CONTINUE
      		
      		// Check whether the current product or variation is still available in stock
      		IF stLine.nVariationID > 0 THEN
      			
      			// Stores the availability of the variation
      			bProductStock = bVariationIsInStock(stLine.nVariationID)
      			IF bProductStock THEN nNbStock = nNbVariationsInStock(stLine.nVariationID)
      			
      		ELSE
      			
      			// Stores the availability of the product
      			bProductStock = bProductIsInStock(product.productid)
      			IF bProductStock THEN nNbStock = nNbProductInStock(product.productid)
      			
      		END
      	
      	END
      	
      	// Defines a line for the product
      	sAnOutOfStockProduct = ExtractString(stLine.sProductRef, 1, csReferenceSeparator) +TAB+ stLine.sArticleCap +TAB+ stLine.nVariationID
      	// Retrieves all the characteristics except for the photo number (used to retrieve the size and color)
      	FOR ALL ELEMENT vValue,sName of stLine:aaCharacteristic
      		IF sName IN (CS_PHOTO_CHARACTERISTIC) THEN CONTINUE
      		sCharacteristics += [", "] + sName+" : "+vValue
      	END
      	// Adds the characteristics
      	IF sCharacteristics <> "" THEN sAnOutOfStockProduct += [TAB] + sCharacteristics
      	
      	// The product or variation found on this basket line is no longer available in stock
      	IF bProductStock = False THEN
      		
      		// Deletes the product
      		BasketDeleteProduct(stLine.sProductRef)
      		// The product was deleted
      		bDeletedProduct = True
      		
      	ELSE // If the product is in stock, check whether there is enough quantity in stock
      		
      		// Checks whether there is enough quantity in stock
      		IF stLine.nNbArticles > nNbStock THEN
      			
      			// Modifies the number to be consistent with the stock
      			BasketDelete(stLine.sProductRef, Val(stLine.nNbArticles-nNbStock))
      			// The quantity was modified
      			bModifiedQuantity = True
      			
      		END
      		
      	END
      	
      	// If the product was deleted or if the quantity was modified
      	IF bDeletedProduct OR bModifiedQuantity THEN
      				
      		// Stores the product (to inform the Web user)
      		sListOutOfStockProducts += [CR] + sAnOutOfStockProduct
      		IF bDeletedProduct THEN sListOutOfStockProducts += [TAB] + "DEL"
      		IF bModifiedQuantity THEN sListOutOfStockProducts += [TAB] + "MODIF"
      		
      	END
      	
      END
      
      // Returns the list
      RESULT sListOutOfStockProducts
     type : 458752
   -
     name : CheckStocks
     internal_properties : CAAAAAgAAAAeQeZWqR4YD9gNuw5ISpse4q5d4YfQh8vxSSLWonylqfGpzXAstIQfjtu5yNZJ9N/c91UXiZv53fcJCNn0zKQH2jXtD1BPimLproJX87E+1RbRiyhFUUvyPW0p6P5mipLcRRthNLb+/G4cHMU2fOcWaLmnLrlIMic+6HTcyeP/rQgO
     procedure_id : 1416730110682440941
     type_code : 15
     code : |1-
      // Summary: Checks the stocks for the products of an order
      // Syntax:
      //CheckStocks (<nOrderID> is int)
      //
      // Parameters:
      //	nOrderID (integer): Identifier of the order
      // Return value:
      // 	None
      //
      // Example:
      // Indicate an example.
      //// Automatic process of exceptions:   run CASE EXCEPTION:
      //
      
      Procedure CheckStocks(LOCAL nOrderID is int)
      
      // Local variables
      sTC_Review 	is string
      sTemplateCR		is string
      
      // Initialize the template of status report
      sTemplateCR = "Ref %1 - %2: remaining stock: %3 (level: %4)"
      
      // Find the order
      HReadSeekFirst(Orders,OrderID,nOrderID)
      IF HFound(Orders) = False THEN
      	AddError("Specified order not found")
      	RETURN
      END
      
      // Browse the products of the order
      FOR EACH OrdLine WHERE OrderID = Orders.OrderID
      	// Is this product in stock?
      	HReadSeekFirst(product,Reference,OrdLine.Reference)
      	IF HFound(product) = False THEN
      		AddError("Specified product not found")
      		RETURN
      	END
      	
      	IF product.LimitedQuantity = True THEN
      		// is it a product with variation?
      		IF OrdLine.ProductVariationID > 0 THEN
      			HReadSeekFirst(ProductVariation,ProductVariationID,OrdLine.ProductVariationID)
      			IF HFound(ProductVariation) = False THEN				
      				AddError("Specified variation not found")
      				RETURN
      			END
      			
      			IF ProductVariation.Quantity <= ProductVariation.StockAlertLevel THEN
      				sTC_Review = sTC_Review + [CR] + StringBuild(sTemplateCR,product.Reference,product.ProductCaption, ProductVariation.Quantity, ProductVariation.StockAlertLevel)
      			END
      		ELSE
      			// Direct product
      			IF product.Quantity <= product.StockAlertLevel THEN
      				sTC_Review = sTC_Review + [CR] + StringBuild(sTemplateCR,product.Reference,product.ProductCaption, product.Quantity, product.StockAlertLevel)
      			END
      		END
      	END
      	
      END
      
      // Have some products reached their limit stocks?
      IF sTC_Review <> "" THEN
      	// Send an email 
      	SendMessageToWebmaster("Stock alert","List of products whose stocks have reached the alert level "+CR+sTC_Review)
      END
      
      
      CASE EXCEPTION:
      	AddError("Exception detected",ExceptionInfo())
      	RETURN
     type : 458752
   -
     name : BasketErrorInfo
     procedure_id : 1416730110682506477
     type_code : 15
     code : |1-
      // Summary: Returns the current error on the basket
      // Syntax:
      //[ <Result> = ] BasketErrorInfo ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	ANSI string: Error
      //
      
      Procedure BasketErrorInfo()
      
      RESULT gsBasketError
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : CAAAAAgAAACVGQgYbalU7DKC3oH4ItDrjtcTHXXV/EuH8q0IbhyQlw==
resources :
 string_res :
  identifier : 0x1e0c492300017dcb
  internal_properties : CAAAAAgAAACm76HWfKGWp33VjXInA4cRlqArlgTTA862QGt72W2ld5Y=
  strings :
   -
     text :
      en-GB : "You have chosen to pay by credit card.\r\n\r\nClick the \"Validate the payment by Credit Card\" button to be redirected to the site for secure payment.\r\n\r\nAfter the payment, a confirmation page of order will be displayed and a confirmation email will be automatically sent."
     index : 0
   -
     text :
      en-GB : "You have chosen to pay via PayPal.\r\n\r\nClick the \"Validate the payment by PayPal\" button to be redirected to the PayPal site.\r\n\r\nAfter the payment, a page for order confirmation will be displayed and a confirmation email will be automatically sent."
     index : 1
   -
     text :
      en-GB : "You have chosen to perform your payment by bank wire. We recommend that you use the bank details below (by specifying to your bank to perform an \"OUR bank wire\" if your payment is performed from the Overseas Departments and Territories or from a foreign country).\r\n\r\nThese details will be summarized in your confirmation email.\r\nDon't forget to specify the order number.\r\n\r\nBank code: 30047\r\nDesk code: 14121\r\nAccount number: 00037236001\r\nKey: 53\r\nPaying bank: CIC Nantes-South\r\n\r\nAddition information for the OUR bank wires:\r\nIBAN: FR76 3004 7141 2100 0372 3600 153\r\nSwift: CMCIFRPP\r\n\r\nYour order will be processed by our services when the total amount of the order is credited to our account. Your order will be automatically canceled if your payment has not been processed within 10 days."
     index : 2
   -
     text :
      en-GB : "You've chosen to pay by check.\r\n\r\nYour check must be payable to the xxx company (don't forget to write the order number on the back of your check) and it must be sent to:\r\n\r\nxxx - Order Department\r\nyyyy Avenue\r\n34000 MONTPELLIER\r\n\r\nYour check will be processed by our services as soon as possible.\r\n\r\nYour order will be automatically canceled if your payment has not been received by us within 10 days.\r\n"
     index : 3
   -
     text :
      en-GB : "Hello,\r\n\r\nThank you for your order (order %3 for a total amount of %2 Dollars) on the %1 site.\r\nYour payment was validated and your order will now be processed.\r\n\r\nBest regards,\r\nOrders Department"
     index : 4
   -
     text :
      en-GB : "Hello,\r\n\r\nThank you for your order on the %1 site.\r\nYou've chosen to pay by check.\r\n\r\nYour check must be payable to the xxx company (don't forget to write the order number (%3) on the back of your check) and it must be sent to:\r\n\r\nxxx - Orders Department\r\nyyyy Avenue\r\n34000 MONTPELLIER\r\n\r\nYour check will be processed by our services as soon as possible.\r\n\r\nYour order will be automatically canceled if your payment has not been received by us within 10 days.\r\n\r\nBest regards,\r\nOrders Department"
     index : 5
   -
     text :
      en-GB : "Hello,\r\n\r\nThank you for your order on the %1 site.\r\n\r\nYou have chosen to perform your payment by bank wire.\r\nWe recommend that you use the bank details below (by specifying to your bank to perform an \"OUR bank wire\" if your payment is performed from the Overseas Departments and Territories or from a foreign country).\r\n\r\nDon't forget to specify the order number (%3).\r\nTotal amount of the order: %2 Dollars.\r\n\r\nBank code: 30047\r\nDesk code: 14121\r\nAccount number: 00037236001\r\nKey: 53\r\nPaying bank: CIC Nantes-South\r\n\r\nAddition information for the OUR bank wires:\r\nIBAN: FR76 3004 7141 2100 0372 3600 153\r\nSwift: CMCIFRPP\r\n\r\nYour order will be processed by our services when the total amount of the order is credited to our account. Your order will be automatically canceled if your payment has not been processed within 10 days.\r\n\r\nBest regards,\r\nOrders Department"
     index : 6
custom_note :
 internal_properties : CAAAAAgAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
